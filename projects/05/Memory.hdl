// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // check address valid
    And(a=address[13], b=address[14], out=invalidHead);
    And16(a[0..12]=true, a[13..14]=false, b[0..14]=address, b[15]=false, out=invalidBodySet);
    Or16Way(in=invalidBodySet, out=invalidBody);
    And(a=invalidHead, b=invalidBody, out=invalid);
    Not(in=invalid, out=valid);

    // only valid address can load
    And(a=load, b=valid, out=validLoad);

    // select address range
    DMux(in=true, sel=address[14], a=selectRAM, b=selectKeyboardScreen);
    DMux(in=selectKeyboardScreen, sel=address[13], a=selectScreen, b=selectKeyboard);

    // RAM 16K [0x0000, 0x3FFF] = [000 0000 0000 0000] -> [011 1111 1111 1111]
    // address[0..13] address[14]=0
    And(a=validLoad, b=selectRAM, out=loadRAM);
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=readRAM);
    Mux16(a=false, b=readRAM, sel=selectRAM, out=outRAM);

    // Screen 8K [0x4000, 0x5FFF] = [100 0000 0000 0000] -> [101 1111 1111 1111]
    // address[0..12] address[13] = 1 address[14]=1
    And(a=validLoad, b=selectScreen, out=loadScreen);
    Screen(in=in, load=loadScreen, address=address[0..12], out=readScreen);
    Mux16(a=false, b=readScreen, sel=selectScreen, out=outScreen);

    // Keybord 1 0x6000 (110 0000 0000 0000)
    // address[13] = 1 address[14]=1
    Keyboard(out=readKeyboard);
    Mux16(a=false, b=readKeyboard, sel=selectKeyboard, out=outKeyboard);

    Or16(a=outKeyboard, b=outScreen, out=outKS);
    Or16(a=outKS, b=outRAM, out=out);
}