// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 指令解码:i xx a cccccc ddd jjj
    // i: 0 代表 A-指令；1 代表 C-指令
    DMux(in=true, sel=instruction[15], a=isAInstruction, b=isCInstruction);
    // xx：无
    // a cccccc：comp部分（图4.3），对应ALU计算方式（图2.6）
    // ALU x=D a=0,y=A;a=1,y=M
    Mux16(a=registerA, b=inM, sel=instruction[12], out=inALU);
    ALU(x=registerD, y=inALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=equal, ng=lower);

    // ddd：目标存储域，图4.4 A D M
    And(a=isCInstruction, b=instruction[5], out=cInsLoadA);
    And(a=isCInstruction, b=instruction[4], out=cInsLoadD);
    And(a=isCInstruction, b=instruction[3], out=cInsLoadM);

    // jjj：跳转域，图4.5
    Or(a=equal, b=lower, out=le);
    Not(in=le, out=great);
    And(a=great, b=instruction[0], out=greatJump);
    And(a=equal, b=instruction[1], out=equalJump);
    And(a=lower, b=instruction[2], out=lowerJump);
    Or(a=greatJump, b=equalJump, out=jump1);
    Or(a=jump1, b=lowerJump, out=jump2);
    And(a=jump2, b=isCInstruction, out=jump);
    Not(in=jump, out=notjump);
    

    // Register A：A-指令会存储；ddd会存储
    Mux16(a[0..15]=false, b[0..14]=instruction[0..14], b[15]=false, sel=isAInstruction, out=aInsValue);
    Mux16(a[0..15]=false, b=aluout, sel=cInsLoadA, out=aAluValue);
    Or16(a=aInsValue, b=aAluValue, out=aLoadValue);
    Or(a=isAInstruction, b=cInsLoadA, out=isLoadA);
    ARegister(in=aLoadValue, load=isLoadA, out=registerA); 

    // Register D：ddd会存储
    DRegister(in=aluout, load=cInsLoadD, out=registerD);

    // PC
    PC(in=registerA, load=jump, inc=notjump, reset=reset, out[0..14]=pc);

    // out
    And16(a=aluout, b[0..15]=true, out=outM);
    And(a=true, b=cInsLoadM, out=writeM);
    And16(a=registerA, b[0..14]=true, b[15]=false, out[0..14]=addressM);
}