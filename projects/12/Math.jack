// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] =  twoToThe[0] + twoToThe[0];
        let twoToThe[2] =  twoToThe[1] + twoToThe[1];
        let twoToThe[3] =  twoToThe[2] + twoToThe[2];
        let twoToThe[4] =  twoToThe[3] + twoToThe[3];
        let twoToThe[5] =  twoToThe[4] + twoToThe[4];
        let twoToThe[6] =  twoToThe[5] + twoToThe[5];
        let twoToThe[7] =  twoToThe[6] + twoToThe[6];
        let twoToThe[8] =  twoToThe[7] + twoToThe[7];
        let twoToThe[9] =  twoToThe[8] + twoToThe[8];
        let twoToThe[10] = twoToThe[9] + twoToThe[9];
        let twoToThe[11] = twoToThe[10] + twoToThe[10];
        let twoToThe[12] = twoToThe[11] + twoToThe[11];
        let twoToThe[13] = twoToThe[12] + twoToThe[12];
        let twoToThe[14] = twoToThe[13] + twoToThe[13];
        let twoToThe[15] = twoToThe[14] + twoToThe[14];

        return;
    }

    /** 
     *  If j-bit of x is 1 return true, else return false
    **/
    function boolean bit(int x, int j){
        return ~(x & twoToThe[j] = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0)
        {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;

        let i = 0;
        let sum = 0;
        let shiftedX = x;

        while ( i < 16)
        {
            if(Math.bit(y, i))
            {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    function int rdivide(int x, int y){
        var int preNum;

        if ( y > x )
        {
            return 0;
        }

        // 长除法，递归到最后，先算最高位
        let preNum = Math.rdivide(x, y+y);
        // 除数进一位
        let preNum = preNum + preNum;
        // 减掉已经计算的部分
        let x = x - preNum * y;
        // 再算当前位
        if(x < y)
        {
            // 当前位为0
            return preNum;
        }

        // 二进制，当前位为1。其他进制需要遍历得出具体几倍
        return preNum + 1;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absVal;
        var bool bNeg;

        if( y = 0)
        {
            do Sys.error("301");
        }

        let bNeg = false;
        if(x < 0)
        {
            let bNeg = ~bNeg;
        }
        if(y < 0)
        {
            let bNeg = ~bNeg;
        }
        
        let absVal = rdivide(abs(x), abs(y));

        if(bNeg)
        {
            return -absVal;
        }

        return absVal;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int suqareVal, y, j;

        let y = 0;
        let j = 7;

        while(j > -1)
        {
            let suqareVal = (y + twoToThe[j]) * (y + twoToThe[j]);
            if(suqareVal > 0 & suqareVal - 1 < x)
            {
                let y = y + twoToThe[j];
            }

            let j = j - 1;
        }
        
        return y;
    }

    /** Returns the modulo part of x%y. */
    function int modulo(){
        return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b)
        {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b)
        {
            return b;
        }

        return a;
    }
}
